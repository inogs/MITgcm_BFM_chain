#!/bin/ksh
# This script executes all the serial steps of the operational MIT_offline chain:
# *BEFORE* the model run
# mit_run_setup		creation of work directories
# mit_get		download of input files
# mit_preproc		preprocessing of input files

# Load common profile
. @@(I:MIT_HOME)/bin/mit_profile.inc

# Rundate definition
mit_set_run

# start
mit_start

typeset -i errors=0

# header
#mit_log 0 "	****************** ***"
mit_log 0 "!!! STEP 'pre' STARTED $MIT_RUNID"
#mit_log 0 "	****************** ***"

function mit_exec_and_log {
  # Exec the mit script $1  with arguments $2...,
  #  and redirect standard output and standard error on a log file
  # The mit script $1 must be given without path and trailing .ksh!!!
  typeset _command="$1"
  shift 1
  typeset _arg
  typeset _args=""
  for _arg in "$@" ; do
    _args="${_args}'$_arg' "
  done
  typeset _logfile="$MIT_RUNLOGDIR/mit.${I_MIT_HOSTNAME}.${MIT_RUNID}.${_command}.out"
  mit_prex "$MIT_SCRDIR/${_command}.ksh $_args 1>$_logfile 2>&1" ; return $_ec
}


## make/clean work directories
#mit_log 0 "### setup of the working environment (making/cleaning work directories)..."
#mit_exec_and_log mit_run_setup ;  ec=$?
#mit_log 0 "### setup of the working environment (making/cleaning work directories)... done [$(mit_exitcode $ec)]"
#if [[ $ec -ne 0 ]] ; then
#  mit_log 0 "WARNING: mit_run_setup.ksh failed!"
#fi
#
## get input files
#mit_log 0 "### getting input files (FORCE_DOWNLOAD=false)..."
#mit_exec_and_log mit_get --try-resume ; ec=$?
#mit_log 0 "### getting input files... done [$(mit_exitcode $ec)]"
#if [[ $ec -ne 0 ]] ; then
#  mit_log 0 "ERROR: mit_get.ksh failed! (aborting chain)"
#  mit_exit 1    
#fi

# proprocessing
mit_log 0 "### preprocessing input files..."
mit_exec_and_log mit_preproc ; ec=$?
mit_log 0 "### preprocessing input files... done [$(mit_exitcode $ec)]"
if [[ $ec -ne 0 ]] ; then
  mit_log 0 "ERROR: 'mit_preproc.ksh' failed! (aborting chain)"
  mit_exit 1    
fi

mit_exit "$errors"




