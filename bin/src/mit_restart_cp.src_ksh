#!/bin/ksh
# This command creates some directories

# Load common profile
. @@(I:OPA_HOME)/bin/opa_profile.inc

. @@(I:OPA_HOME)/bin/opa_lists.inc

function print_help {
  cat <<EofHlp
Usage: $OPA_PROGNAME [action] [options]
[options]
$(opa_set_default_run__print_options)
	--source-module|-M M			set source module M
						[DEFAULT: ${opa_source_module}]
	--source-host|-H H			set source host H
						[DEFAULT: ${opa_source_module}]
	--copy-arc|-ca				copy archive
	--all-arc|-aa				copy all archive (no patterns)
						[DEFAULT: ${opa_copy_all_arc}]
	--arc-pattern|-ap P			add arc pattern P
						[DEFAULT: '$opa_arc_patterns']
	--purge-arc-patterns|-aP		purge all arc patterns
	--copy-inp|-ci				copy inpdir
	--all-inp|-ai				copy all inpdir (no patterns)
						[DEFAULT: ${opa_copy_all_inp}]
	--inp-pattern|-ip P			add inp pattern P
						[DEFAULT: '$opa_inp_patterns']
	--purge-inp-patterns|-iP		purge all inp patterns
	--copy-all|-c				copy arc and inp
	--force|-f				force
						[DEFAULT: '${force}']
	--help|-h				show this help
EofHlp
}

function opa_read_profile_variable {
  typeset _variable_name="$1"
  shift 1
  typeset _profile
  (
    for _profile in "$@" ; do
      if [[ ! -f "$_profile" ]] ; then
        echo "ERR: missing profile '$_profile'" 1>&2
        return 1
      fi
      . "$_profile"
    done
    eval "printf '%s' \"\${${_variable_name}}\""
  )
}

function opa_read_remote_variable {
  typeset _host="$1"
  typeset _modules="$2"
  shift 2
  typeset _variable_name
  typeset _source="source \$HOME/.bashrc ; module purge ; module load $_modules"
  for _variable_name in "$@" ; do
    _source="$_source ; echo ${_variable_name}=\${${_variable_name}}"
  done
  echo "DEBUG: Executing command ssh \"$_host\" bash -lis with source=='$_source'"
  ssh "$_host" bash -lis <<EOFSRC
$_source
EOFSRC
  #{ ssh "$_host" bash -lis "$_source" 
  #} #2>/dev/null | $OPA_BINDIR/grep "^${_variable_name}=" | $OPA_BINDIR/cut -d= -f2-
}

function opa_set_module {
  typeset _module_name="$1"
  #echo "module_name=$_module_name" 1>&2
  #echo "opa_module_name=$I_OPA_MODULE" 1>&2
  if [[ $(dirname "$_module_name") == '.' ]] ; then
    _module_name="$(dirname $I_OPA_MODULE)/$_module_name"
  fi
  #echo "module_name=$_module_name" 1>&2
  echo "$_module_name"
}

case "$I_OPA_HOSTNAME" in
  sp6)
    opa_source_host=plx
    ;;
  plx)
    opa_source_host=sp6
    ;;
  *)
    opa_source_host=sp6
    ;;
esac
opa_source_module="$I_OPA_MODULE"
opa_copy_all_arc=false
opa_copy_all_inp=false

opa_arc_patterns="$EMPTY_LIST"
opa_default_arc_patterns="__default_arc_patterns__"
opa_arc_patterns="$opa_arc_patterns$opa_default_arc_patterns "

opa_inp_patterns="$EMPTY_LIST"
opa_default_inp_patterns="__default_inp_patterns__"
opa_inp_patterns="$opa_inp_patterns$opa_default_inp_patterns "

opa_copy_inpdir=false
opa_copy_arcdir=false
force=false
while [[ ${#@} -ne 0 ]] ; do
  arg="$1"
  shift 1
  case "$arg" in
    --rundate|-r|--weekday|-w|--today|-t|--submit-day-offset|-s)
        opa_set_default_run_options="${opa_set_default_run_options}$arg '$1' "
        shift 1
        ;;
    --help|-h)
      print_help
      exit 0
      ;;
    --source-module|-M)
      opa_source_module=$(opa_set_module "$1")
      shift 1
      ;;
    --source-host|-H)
      opa_source_host="$1"
      shift 1
      ;;
    --purge-arc-patterns|-aP)
      opa_arc_patterns="$EMPTY_LIST"
      ;;
    --arc-patterns|-ap)
      opa_arc_patterns="$opa_arc_patterns$1 "
      shift 1
      ;;
    --purge-inp-patterns|-iP)
      opa_inp_patterns="$EMPTY_LIST"
      ;;
    --inp-patterns|-ip)
      opa_inp_patterns="$opa_inp_patterns$1 "
      shift 1
      ;;
    --copy-inpdir|--copy-inp|-ci)
      opa_copy_inpdir=true
      ;;
    --copy-archive|--copy-arc|-ca)
      opa_copy_arcdir=true
      ;;
    --copy-all|-c)
      opa_copy_inpdir=true
      opa_copy_arcdir=true
      ;;
    --all-arc|--all-archive|-aa)
      opa_copy_all_arc=true
      ;;
    --all-inp|--all-inpdir|-ai)
      opa_copy_all_inp=true
      ;;
    --force|-f)
      force=true
      ;;
    *)
      echo "ERR: invalid argument '$arg'" 1>&2
      exit 1
      ;;
  esac
done


opa_prex "opa_set_default_run $opa_set_default_run_options"
opa_prex "opa_set_run $OPA_DEFAULT_RUNDATE"


#echo "$OPA_RUNDATE $OPA_DA_START_DATE"
#opa_ave_date_yymmdd=$($OPA_BINDIR/date --utc --date="$OPA_DA_START_DATE 00:00:00" +'%y%m%d')
#opa_bfm_date_yymmdd=$($OPA_BINDIR/date --utc --date="$OPA_DA_START_DATE 00:00:00" +'%y%m%d')
#opa_def_patterns=" MODEL/BFM.${opa_bfm_date_yymmdd}*.nc* POSTPROC/ave.${opa_ave_date_yymmdd}.nc* "

opa_def_arc_patterns=" MODEL/BFM.*.nc.gz POSTPROC/ave.*.nc.gz "
opa_arc_patterns=$(printf '%s' "$opa_arc_patterns" | sed -e "s!${opa_default_arc_patterns}!${opa_def_arc_patterns}!g")

opa_def_inp_patterns=" OPAOPER_A/*.nc.gz OPAOPER_F/*.nc.gz DA_SAT/*.nc.bz2 "
opa_inp_patterns=$(printf '%s' "$opa_inp_patterns" | sed -e "s!${opa_default_inp_patterns}!${opa_def_inp_patterns}!g")

case "$opa_source_host" in
  localhost)
    opa_source_host=$I_OPA_HOSTNAME
    ;;
esac

opa_source_profile="$OPA_SCRDIR/opa_profile__${opa_source_host}.inc"
if [[ ! -f "$opa_source_profile" ]] ; then
  echo "ERR: invalid source host '$opa_source_host'" 1>&2
  exit 2
fi

#echo "OPA_HOST_LOGIN_NODES=$OPA_HOST_LOGIN_NODES"
opa_source_login_nodes=$(opa_read_profile_variable OPA_HOST_LOGIN_NODES "$opa_source_profile")
#echo "$opa_source_login_nodes"
#echo "OPA_HOST_LOGIN_NODES=$OPA_HOST_LOGIN_NODES"

opa_source_login_node=""
for opa_source_login_node_tmp in $opa_source_login_nodes ; do
  echo "DEBUG: getting info from $opa_source_login_node_tmp ..."
  #opa_read_remote_variable "$opa_source_login_node_tmp" 'I_OPA_HOME' "$opa_source_module"
  opa_source_data=$(opa_read_remote_variable "$opa_source_login_node_tmp" "$opa_source_module" I_OPA_HOME OPA_ARCDIR_ROOT OPA_INPDIR_ROOT 2>&1)
  opa_source_home=$($OPA_BINDIR/echo "$opa_source_data" | $OPA_BINDIR/grep -e "^I_OPA_HOME=" | $OPA_BINDIR/cut -d= -f2-)
  opa_source_arcdir_root=$($OPA_BINDIR/echo "$opa_source_data" | $OPA_BINDIR/grep -e "^OPA_ARCDIR_ROOT=" | $OPA_BINDIR/cut -d= -f2-)
  opa_source_inpdir_root=$($OPA_BINDIR/echo "$opa_source_data" | $OPA_BINDIR/grep -e "^OPA_INPDIR_ROOT=" | $OPA_BINDIR/cut -d= -f2-)
  if [[ "$opa_source_home" != '' ]] ; then
    opa_source_login_node="$opa_source_login_node_tmp"
    break
  else
    cat <<EofCat
================================================================================
$opa_source_data
================================================================================
EofCat
  fi
done

if [[ "$opa_source_arcdir_root" == "" ]] ; then
  opa_source_arcdir_root="${opa_source_home}/archive"
fi

if [[ "$opa_source_inpdir_root" == "" ]] ; then
  opa_source_inpdir_root="${opa_source_home}/inpdir"
fi

opa_source_module_name=$(basename "$opa_source_module")

cat <<EofCat
source host ................................... $opa_source_host
source module ................................. $opa_source_module
source module name ............................ $opa_source_module_name
source login nodes ............................ $opa_source_login_nodes
source login node ............................. $opa_source_login_node
source OPA_RUNDATE ............................ $OPA_RUNDATE
source OPA_RESTART_RUNDATE .................... $OPA_RESTART_RUNDATE
source I_OPA_HOME ............................. $opa_source_home
source OPA_ARCDIR_ROOT ........................ $opa_source_arcdir_root
arc_copy_all .................................. $opa_copy_all_arc
arc_patterns .................................. $opa_arc_patterns
source OPA_INPDIR_ROOT ........................ $opa_source_inpdir_root
inp_copy_all .................................. $opa_copy_all_inp
inp_patterns .................................. $opa_inp_patterns
EofCat

if [[ "$opa_source_login_node" == '' ]] ; then
  echo "ERR: cannot get remote data" 1>&2
  exit 3
fi

if ! $force ; then
  printf '%s' "Do you want to proceed? (y/N) "
  typeset -l answer
  
  while true ; do
    read answer
    case "$answer" in
      y|yes)
        break
        ;;
      n|no|'')
        echo "Ok, exiting"
        exit 0
        ;;
      *)
        continue
        ;;
    esac
  done
fi

opa_source_arcdir="$opa_source_arcdir_root/$OPA_RESTART_RUNDATE"
opa_target_arcdir="$OPA_ARCDIR_ROOT/${OPA_RESTART_RUNDATE}.${opa_source_host}.${opa_source_module_name}"
opa_target_arclnk="$OPA_ARCDIR_ROOT/$OPA_RESTART_RUNDATE"

opa_source_inpdir="$opa_source_inpdir_root/$OPA_RUNDATE"
opa_target_inpdir="$OPA_INPDIR_ROOT/${OPA_RUNDATE}.${opa_source_host}.${opa_source_module_name}"
opa_target_inplnk="$OPA_INPDIR_ROOT/$OPA_RUNDATE"

function opa_download {
  typeset _opa_source_dir="$1"
  typeset _opa_target_dir="$2"
  typeset _opa_target_lnk="$3"
  typeset _opa_copy_all="$4"
  typeset _opa_patterns="$5"
  if [[ -d "$_opa_target_dir" ]] ; then
    typeset -i count=0
    while true ; do
      d="${_opa_target_dir}.$count"
      if [[ ! -d "$d" ]] ; then
        opa_prex "mv ${_opa_target_dir} ${d}"
        break
      fi
      count=$(( $count + 1 ))
    done
  fi
  if [[ -h "$_opa_target_lnk" ]] ; then
    opa_prex "rm -f '$_opa_target_lnk'"
  elif [[ -d "$_opa_target_lnk" ]] ; then
    typeset -i count=0
    while true ; do
      d="${_opa_target_lnk}.$count"
      if [[ ! -d "$d" ]] ; then
        opa_prex "mv ${_opa_target_lnk} ${d}"
        break
      fi
      count=$(( $count + 1 ))
    done
  elif [[ -e "$_opa_target_lnk" ]] ; then
    opa_prex "rm -rf '$_opa_target_lnk'"
  fi
  
  if $_opa_copy_all ; then
    opa_scp -pr ${USER}@$opa_source_login_node:${_opa_source_dir} $_opa_target_dir
  else
    opa_mkdir "$_opa_target_dir"
    set -o noglob
    for opa_pattern in $_opa_patterns ; do
      opa_target_subdir=$_opa_target_dir/$(dirname "$opa_pattern")
      opa_mkdir $opa_target_subdir
      opa_scp -p ${USER}@$opa_source_login_node:${_opa_source_dir}/$opa_pattern $opa_target_subdir
    done
    set +o noglob
  fi
  opa_prex "ln -fs $_opa_target_dir $_opa_target_lnk"
}

if $opa_copy_arcdir ; then
  opa_download "$opa_source_arcdir" "$opa_target_arcdir" "$opa_target_arclnk" "$opa_copy_all_arc" "$opa_arc_patterns"
fi
if $opa_copy_inpdir ; then
  opa_download "$opa_source_inpdir" "$opa_target_inpdir" "$opa_target_inplnk" "$opa_copy_all_inp" "$opa_inp_patterns"
fi

    
