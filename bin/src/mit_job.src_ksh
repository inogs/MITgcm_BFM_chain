#!/bin/ksh
# This command manages the mit jobs

# Load common profile
. @@(I:MIT_HOME)/bin/mit_profile.inc

# Load specific profile for resource manager $MIT_RM
. $MIT_SCRDIR/mit_rm.inc


function print_help {
  cat <<EofHlp
Usage: $MIT_PROGNAME [action] [options]
[options]
$(mit_set_default_run__print_options)
	--action|-A A				set action A
						[DEFAULT: ${ACTION__DEFAULT}]
						[ACTIONS: ${ACTIONS}]
	--jobid|-j J				add jobid J [repeatable]
						[DEFAULT: submitted jobids for selected runids]
	--runid|-r R				add runid R [repeatable]
						[DEFAULT: last runid]
	--all|-a A				all user's jobs
						[DEFAULT: ${all_jobs}]
	--force|-f				force del command
						[DEFAULT: ${force}]
	--formatted|-F				formatted output (for stat action)
						[DEFAULT: ${formatted}]
	--unformatted|-U			unformatted output (for stat action)
						[DEFAULT: ! ${formatted}]
						[DEFAULT: ${all_jobs}]
	--help|-h				show this help
EofHlp
}

ACTION__STAT='stat'
ACTION__DEL='del'
ACTION__DEFAULT="$ACTION__STAT"
ACTIONS=" $ACTION__STAT $ACTION__DEL "
empty=" "
action=''
jobids="$empty"
runids="$empty"
default_action="$ACTION__DEFAULT"
all_jobs=false
formatted=true
force=false
while [[ ${#@} -ne 0 ]] ; do
  arg="$1"
  shift 1
  case "$arg" in
    --rundate|-r|--weekday|-w|--today|-t|--submit-day-offset|-s)
	mit_set_default_run_options="${mit_set_default_run_options}$arg '$1' "
	shift 1
	;;
    --action|-A)
	action="$1"
	;;
    --jobid|-j)
	jobids="$jobids$1 "
	;;
    --runid|-r)
	runids="$runids$1 "
	;;
    --all|-a)
	all_jobs=true
	;;
    --formatted|-F)
	formatted=true
	;;
    --unformatted|-U)
	formatted=false
	;;
    --force|-f)
	force=true
	;;
    --help|-h)
	print_help
	exit 0
	;;
    *)
	if [[ "$action" == '' ]] ; then
	  action="$arg"
	else
	  jobids="$jobids$arg "
	fi
	;;
  esac
done

eval mit_set_default_run $mit_set_default_run_options
mit_prex "mit_set_run $MIT_DEFAULT_RUNDATE"

#echo "ACTION=<$action>"
if [[ "$action" == '' ]] ; then
  action="$default_action"
fi
#echo "ACTION=<$action>"

if [[ $(echo " $ACTIONS " | grep -c " $action ") -eq 0 ]] ; then
  echo "ERR: invalid action '$action'" 1>&2
  exit 1
fi

#echo "ACTION=<$action>"
require_force=false
case "$action" in
  $ACTION__STAT)
	if $formatted ; then
	  action_function=mit_rm_job_stat_formatted
	else
	  action_function=mit_rm_job_stat
	fi
	;;
  $ACTION__DEL)
	action_function=mit_rm_job_del
	require_force=true
	;;
  *)
	echo "INTERNAL ERROR: invalid action '$action'" 1>&2
	exit 1
	;;
esac

echo "all_jobs=$all_jobs"
if $all_jobs ; then
  :
else
  if [[ "$runids" == "$empty" ]] ; then
    runids="$(mit_runid)"
  fi
  echo "RUNIDS: $runids"
  if [[ "$jobids" == "$empty" ]] ; then
    for runid in $runids ; do
      runid_jobids="$(mit_get_jobids $runid)"
      echo "  RUN[${runid}] JOBIDS: $runid_jobids"
      jobids="$jobids$runid_jobids "
    done
  fi
  echo "JOBIDS: $jobids"
fi

if  $require_force && ( ! $force ) && [[ $(echo "$jobids" | $MIT_BINDIR/wc -w) -ne 0 ]] ; then
  force=false
  while true ; do
    printf "WARNING: do you *really* want to delete jobs [${jobids}]? (y/N) "
    read answer
    case "$answer" in
      y|Y|yes|YES|Yes)
        force=true
        break
        ;;
      n|N|no|NO|No|'')
        force=false
        break
        ;;
      *)
        continue
        ;;
    esac
  done
  if ! $force ; then
    echo "Action '${action} $jobids' not executed. You may use --force flag" 1>&2
    exit 1
  fi
fi
      
mit_prex "$action_function $jobids"

