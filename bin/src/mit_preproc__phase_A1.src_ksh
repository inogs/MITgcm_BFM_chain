#!/bin/ksh

# Load common profile
. @@(I:MIT_HOME)/bin/mit_profile.inc

# Rundate definition
mit_set_run

# start
mit_start
mit_prex "source $MIT_VENV_1/bin/activate"
PYTHONPATH=$PYTHONPATH:$MIT_BITSEA
#mit_prex "cd $MIT_BC_IC_FROM_OGSTM_DIR"


    DATESTART=$( date -d "${MIT_RUNDATE}  -  7  days " +%Y%m%d )   # <--- IC
    DATE__END=$( date -d "${MIT_RUNDATE}  +  3  days " +%Y%m%d-%H:%M:%S )   # all period
OPA_RUNDATE_A=$( date -d "last tuesday" +%Y%m%d )
       DATE_W=$( date -d "${OPA_RUNDATE_A} - 5 days +  12  hours " +%Y%m%d-%H:%M:%S )



OPA_ARCDIR_ROOT=/gpfs/work/OGS_prod_0/OPA/V6C/prod/archive

       ARCHIVE_AVE_W=$OPA_ARCDIR_ROOT/analysis/$OPA_RUNDATE_A/POSTPROC/AVE_FREQ_2
       AVE_DAILY_DIR=$MIT_WRKDIR/BC_IC/BIO/UNZIPPED/AVE/DAILY
      AVE_WEEKLY_DIR=$MIT_WRKDIR/BC_IC/BIO/UNZIPPED/AVE/WEEKLY
AVE_DAILY_ZIPPED_DIR=$MIT_WRKDIR/BC_IC/BIO/ZIPPED/AVE/DAILY
            PHYS_DIR=$MIT_WRKDIR/BC_IC/PHYS/UNZIPPED

              MASKFILE=$MIT_WRKDIR/BC_IC/mask.nc    # to be generated
        MASK_OGSTM_RED=$MIT_WRKDIR/BC_IC/mask_ogstm_reduced.nc

MPI="mpirun -np 36 "


cd $AVE_DAILY_ZIPPED_DIR
for D in `mit_days `; do
  ARCHIVE_DIR=`python $MIT_BITSEA/validation/online/V6C_archive_info.py -d $D --dir`
  mit_prex_or_die "mit_linker $OPA_ARCDIR_ROOT/$ARCHIVE_DIR/POSTPROC/AVE_FREQ_1/ARCHIVE/ave.${D}-12:00:00.*.nc.gz "
done


cd $MIT_WRKDIR
# Parallel uncompressing of OPA_HIGH_FREQ_VARIABLES
for var in  N O[23][ohc] P[1-4][lc] Z R6c B1c; do
   mit_prex_or_die " $MPI python $MIT_POSTPROCDIR/archive/uncompress.py -i $AVE_DAILY_ZIPPED_DIR    -o $AVE_DAILY_DIR  -l ave*${var}*.nc.gz "
done

# Parallel uncompressing of all weekly vars
mit_prex_or_die " $MPI python $MIT_POSTPROCDIR/archive/uncompress.py -i $ARCHIVE_AVE_W  -o $AVE_WEEKLY_DIR -l *gz "

# completes AVE_DAILY_DIR generation
for var in $OPA_LOW__FREQ_VARIABLES ; do
   mit_prex_or_die "mit_weekly_linker $AVE_WEEKLY_DIR/ave.${DATE_W}.${var}.nc $AVE_DAILY_DIR "
done

# questo crea gli ave.yyyymmdd-00:00:00.var.nc non mi ricordo se Ã¨ utile
#for var in $OPA_HIGH_FREQ_VARIABLES ; do
#	prex_or_die "ln -fs $AVE_DAILY_DIR/ave.${DATESTART:0:8}-12:00:00.${var}.nc ${AVE_DAILY_DIR}/ave.${DATESTART}.${var}.nc "
#done

####### link phys  ###########################
for D in `mit_days `; do
  ARCHIVE_PHYS_PREFIX=`python ${MIT_BITSEA}/validation/online/V6C_archive_info.py -d $D --phys `
  for var in U V T ; do
    phys_file=$OPA_ARCDIR_ROOT/${ARCHIVE_PHYS_PREFIX}${var}.nc
    filename=${D}_${var}.nc  # 20200510_U.nc
    mit_prex_or_die "ln -fs $phys_file $PHYS_DIR/$filename"
  done
done
##################################################################



### Step 0.  GET MASK INFO  #####################################

#BATHY=$MIT_WRKDIR/BC_IC/bathy
#mit_prex_or_die "gzip -dc $MIT_ETCDIR/static-data/ADRI_128/bathy.gz > $BATHY"
#mit_prex_or_die "python $MIT_BC_IC_FROM_OGSTM_DIR/static-data/masks/CADEAU/maskgen.py -b $BATHY -o $MASKFILE"

mit_prex_or_die "gzip -dc $MIT_ETCDIR/static-data/ADRI_128/mask.nc.gz > $MASKFILE"

MASK__PHYS="$HOME/OPA/V6C/etc/static-data/MED24_141/meshmask.nc"
MASK_OGSTM="$HOME/OPA/V6C/etc/static-data/MED24_125/meshmask.nc"

mit_prex_or_die " python $MIT_BC_IC_FROM_OGSTM_DIR/get_cut_Locations.py -c $MASK__PHYS -f $MASKFILE > $MIT_WRKDIR/BC_IC/set_cut_indexes_PHYS_vs_local.sh "
mit_prex_or_die " python $MIT_BC_IC_FROM_OGSTM_DIR/get_cut_Locations.py -c $MASK_OGSTM -f $MASKFILE > $MIT_WRKDIR/BC_IC/set_cut_indexes_OGSTM_vs_local.sh "

mit_prex_or_die "chmod 744 $MIT_WRKDIR/BC_IC/set_cut_indexes_PHYS_vs_local.sh $MIT_WRKDIR/BC_IC/set_cut_indexes_OGSTM_vs_local.sh"

# getting OGSTM mask reduced on local
#mit_prex_or_die ". $MIT_BC_IC_FROM_OGSTM_DIR/nco_indexer.sh $MIT_WRKDIR/BC_IC/set_cut_indexes_OGSTM_vs_local.sh"
mit_prex_or_die ". $MIT_WRKDIR/BC_IC/set_cut_indexes_OGSTM_vs_local.sh"
mit_prex_or_die "$MIT_BINDIR/ncks -F -d x,$((Index_W+1)),$((Index_E+1)) -d y,$((Index_S+1)),$((Index_N+1)) $MASK_OGSTM -O $MASK_OGSTM_RED"
##################################################################





typeset -i errors=0
mit_exit "$exit_code"


# Get name of ECMWF wind input files
mit_set_input_files__mitoper_a
mit_set_input_files__mitoper_f

typeset -i errors=0

### set up of input files in $OPA_WRKDIR/OPAOPER

$OPA_SCRDIR/mit_input_stagein.ksh || errors=$(( $errors + 1 ))

# ### create links for analyses
# $OPA_SCRDIR/mit_link_analyses.ksh || errors=$(( $errors + 1 ))

# ### create links for analyses
# $OPA_SCRDIR/mit_link_forecast.ksh || errors=$(( $errors + 1 ))


if [[ $errors -gt 0 ]] ; then
  mit_log 0 "WRN: $errors errors during phase A1"
fi

echo "DBG: LD_LIBRARY_PATH=$LD_LIBRARY_PATH"

### check input files:
typeset -i exit_code=0
$OPA_SCRDIR/mit_check_input_files.ksh || exit_code=$?

mit_exit "$exit_code"
