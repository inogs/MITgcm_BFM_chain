#!/bin/bash

# This script download a specific domain of a list of Copernicus products

# It needs the following software to be installed:
# - curl
# - xmllint
# - jq
# - motuclient.py (https://pypi.org/project/motuclient/)

declare -r VERSION="1.0";

declare CONF_FILE;
declare RUN_DATE;
declare MOTU_DIR;
declare -r MOTU_FILE="motuclient.py";  
declare -r JQ="jq";
declare OUTPUT_DIR;

declare -f usage;
declare -f getConfItem;
declare -f printConfSkeleton;

usage() {
	echo -e -n "\n";
	echo "NAME";
	echo -e "\t$(basename $0) - Download a specific domain of a list of Copernicus products";
	echo -e -n "\n";
	echo "SYNOPSYS";
	echo -e "\t$(basename $0) [-d rundate (YYYYMMDD)] [-o output-directory] [-c configuration-file] [-m motuclient-directory] [-h] [-v] [-s]";
	echo -e -n "\n";
	echo "DESCRIPTION";
	echo -e "\tmotuclient is required. Install from .tar.gz as specified at https://github.com/clstoulouse/motu-client-python.";
	echo -e -n "\n";
	echo -e "\tBefore starting the user has to configure the script for the specific domain using";
	echo -e "\ta \".json\" configuration file. A skeleton file can be obtained using option \"-s\"";
	echo -e -n "\n";
	echo -e "\tIn that file:";
	echo -e "\t- username and password are mandatory (https://resources.marine.copernicus.eu/?option=com_sla)";
	echo -e "\t- the geobox is mandatory";
	echo -e "\t- \"services\" and \"products\" \"name\" attributes are mandatory";
	echo -e "\t- omitting product \"variables\" attribute means all variables of that product";
	echo -e "\t- omitting \"domain_depth_min\" and \"domain_depth_max\" means all depths";
	echo -e -n "\n";
	echo -e "\tOptions on command line override those in the configuration file.";
	echo -e -n "\n";
	echo -e "\tIf rundate is missing current date is used.";
	echo -e -n "\n";
	echo "EXAMPLE";
	echo -e "\t$(basename $0) -d $(date +"%Y%m%d") -o /tmp -c /usr/local/etc/$(basename $0 .sh).json -m /usr/local/bin";
	echo -e -n "\n";
	echo "AUTHOR";
	echo -e "\tAlberto Brosich.";
	echo -e -n "\n";
}

getConfItem() {
	RESULT=$(${JQ} --compact-output --raw-output --monochrome-output ".${1}" ${CONF_FILE});

	if [ "${RESULT}" != "null" ]; then
		echo "${RESULT}";
	else
		echo "";
	fi
}

printConfSkeleton() {
${JQ} <<EOF
{
"motu_user": "username",
"motu_password": "password",
"domain_lat_min": 00.0,
"domain_lat_max": 00.0,
"domain_lon_min": 00.0,
"domain_lon_max": 00.0,
"domain_depth_min": 0.0,
"domain_depth_max": 0000.0,
"days_before": 7,
"days_after": 3,
"output_dir": "out_dir",
"motu_dir": "/usr/local/bin",
"motu_server": "http://nrt.cmems-du.eu/motu-web/Motu",
"csw_catalog_url_template": "https://resources.marine.copernicus.eu/?option=com_csw&view=details&tab=info&product_id=%s&format=xml",
"services": [{"name": "MEDSEA_ANALYSIS_FORECAST_PHY_006_013","products": [{"name": "cur","variables": ["uo", "vo"]},{"name": "sal","variables": ["so"]},{"name": "tem","variables": ["thetao"]}]},{"name": "MEDSEA_ANALYSIS_FORECAST_BIO_006_014","products": [{"name": "nut","variables": ["no3", "po4"]},{"name": "bio","variables": ["o2"]},{"name": "car","variables": ["dissic"]}]}]}
EOF
}

# list of arguments expected in the input
optstring="c:d:m:o:hvs"

while getopts ${optstring} arg; do
	case ${arg} in
	h)
		usage;
		exit 0;
		;;
	c)
		CONF_FILE="${OPTARG}";
		;;
	d)
		RUN_DATE="${OPTARG}";
		;;
	m)
		MOTU_DIR="${OPTARG}";
		;;
	o)
		OUTPUT_DIR="${OPTARG}";
		;;
	s)
		printConfSkeleton;
		exit 0;
		;;
	v)
		echo "Version: ${VERSION}";
		exit 0;
		;;
	?)
		usage >&2;
		exit 10;
		;;
	esac
done

# check if configuration file exists
if [ -z "${CONF_FILE}" ]; then
	# if not specified configuration file has the same name of the script
	CONF_FILE="$(dirname $0)/$(basename --suffix=.sh $0).json";
fi

if [ ! -s "${CONF_FILE}" ]; then
	echo "[ERROR] Missing configuration file \"${CONF_FILE}\"" >&2;
	exit 3;
fi

# check motu client installation directory and script
if [ -z "${MOTU_DIR}" ]; then
	MOTU_DIR=$(getConfItem "motu_dir");
fi

if [ ! -d "${MOTU_DIR}" -o ! -s "${MOTU_DIR}/${MOTU_FILE}" ]; then
	echo "[ERROR] Missing motu client file \"${MOTU_DIR}/${MOTU_FILE}\"" >&2;
	exit 4;
fi

# check output directory
if [ -z "${OUTPUT_DIR}" ]; then
	OUTPUT_DIR=$(getConfItem "output_dir");
fi

if [ ! -d "${OUTPUT_DIR}" ]; then
	echo "[ERROR] Missing output directory \"${OUTPUT_DIR}\"" >&2;
	exit 5;
fi

# check rundate
# if missing uses current date
if [ -z "${RUN_DATE}" ]; then
	RUN_DATE=$(date +"%Y%m%d");
fi

declare -r MOTU_SERVER=$(getConfItem "motu_server");
declare -r MOTU_USER=$(getConfItem "motu_user");
declare -r MOTU_PWD=$(getConfItem "motu_password");

declare -r DOMAIN_LAT_MIN=$(getConfItem "domain_lat_min");
declare -r DOMAIN_LAT_MAX=$(getConfItem "domain_lat_max");
declare -r DOMAIN_LON_MIN=$(getConfItem "domain_lon_min");
declare -r DOMAIN_LON_MAX=$(getConfItem "domain_lon_max");
declare DOMAIN_DEPTH_MIN=$(getConfItem "domain_depth_min");
declare DOMAIN_DEPTH_MAX=$(getConfItem "domain_depth_max");

declare -i -r DAYS_BEFORE=$(getConfItem "days_before");
declare -i -r DAYS_AFTER=$(getConfItem "days_after");

declare -r CSW_CATALOG_URL_TEMPLATE=$(getConfItem "csw_catalog_url_template");

declare TEMP_FILE;

declare DOMAIN_DATE_MIN;
declare DOMAIN_DATE_MAX;

# compute start and end dates
DOMAIN_DATE_MIN=$(date --date "${RUN_DATE} - ${DAYS_BEFORE} days" +"%F") || exit 2;
DOMAIN_DATE_MAX=$(date --date "${RUN_DATE} + ${DAYS_AFTER} days" +"%F") || exit 2;

# depth limits are not mandatory
if [ -z "${DOMAIN_DEPTH_MIN}" ]; then
	DOMAIN_DEPTH_MIN=0;
fi
if [ -z "${DOMAIN_DEPTH_MAX}" ]; then
	DOMAIN_DEPTH_MAX=9999;
fi

TEMP_FILE=$(mktemp);

trap "rm -f ${TEMP_FILE}" EXIT

seq 0 $(($(getConfItem "services | length") - 1)) |\
while read SERVICE_INDEX
do
	SERVICE=$(getConfItem "services[${SERVICE_INDEX}].name");
	printf -v CSW_CATALOG_URL "${CSW_CATALOG_URL_TEMPLATE}" "${SERVICE}";

	# download catalog file
	curl \
		--silent \
		"${CSW_CATALOG_URL}" > ${TEMP_FILE};

	# loop on product of the current service
	getConfItem "services[${SERVICE_INDEX}].products[].name" |\
	while read PRODUCT
	do
		# xpath query to identify product id
		XPATH=$(cat <<EOF
//*[local-name()='CI_OnlineResource' and child::*[local-name()='protocol'] and descendant::*[local-name()='CharacterString']/text() = 'MYO:MOTU-SUB']
//*[local-name()='CharacterString' and contains(text(), "-${PRODUCT}-") and contains(text(), "-d") and substring-after(text(), "-d") = '' and parent::*[local-name()='name']]/text()
EOF
);

		PRODUCT_ID=$(xmllint --xpath "${XPATH}" ${TEMP_FILE});

		# get vars from configuration file
		VAR_OPTS=$(getConfItem "services[${SERVICE_INDEX}].products[] | select (.name == \"${PRODUCT}\")  | .variables[] | walk(\"--variable \" + .)");

		${MOTU_DIR}/${MOTU_FILE} \
			--quiet \
			--user="${MOTU_USER}" \
			--pwd="${MOTU_PWD}" \
			--motu="${MOTU_SERVER}" \
			--service-id="${SERVICE}-TDS" \
			--product-id="${PRODUCT_ID}" \
			--date-min="${DOMAIN_DATE_MIN}" \
			--date-max="${DOMAIN_DATE_MAX}" \
			--latitude-min=${DOMAIN_LAT_MIN} \
			--latitude-max=${DOMAIN_LAT_MAX} \
			--longitude-min=${DOMAIN_LON_MIN} \
			--longitude-max=${DOMAIN_LON_MAX} \
			--depth-min=${DOMAIN_DEPTH_MIN} \
			--depth-max=${DOMAIN_DEPTH_MAX} \
			${VAR_OPTS} \
			--out-dir="${OUTPUT_DIR}" \
			--out-name="${PRODUCT_ID}-${RUN_DATE}.nc" \
		;
	done
done

exit 0;
